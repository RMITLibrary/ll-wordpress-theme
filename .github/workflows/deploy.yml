name: Deploy to WP Engine

on:
  push:
    branches: [main, develop, staging]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      THEME_DIR: wp-content/themes/rmit-learning-lab

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # ensure previous commit is available for diff checks

      # Detect lockfile location (root vs theme). If neither exists, no cache.
      - name: Detect lockfile
        id: detect_lockfile
        run: |
          if [ -f "package-lock.json" ]; then
            echo "LOCKFILE=package-lock.json" >> $GITHUB_ENV
            echo "has_lock=true" >> $GITHUB_OUTPUT
          elif [ -f "${THEME_DIR}/package-lock.json" ]; then
            echo "LOCKFILE=${THEME_DIR}/package-lock.json" >> $GITHUB_ENV
            echo "has_lock=true" >> $GITHUB_OUTPUT
          else
            echo "LOCKFILE=" >> $GITHUB_ENV
            echo "has_lock=false" >> $GITHUB_OUTPUT
          fi

      # Use cache only if we actually found a lockfile
      - name: Setup Node (cached)
        if: steps.detect_lockfile.outputs.has_lock == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: ${{ env.LOCKFILE }}

      - name: Setup Node (no cache)
        if: steps.detect_lockfile.outputs.has_lock != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # Install deps where the lockfile (or package.json) actually is
      - name: Install deps
        run: |
          if [ -f "package.json" ] && [ -f "package-lock.json" ]; then
            npm ci
            WORKDIR="."
          elif [ -f "${THEME_DIR}/package.json" ]; then
            cd "${THEME_DIR}"
            if [ -f "package-lock.json" ]; then npm ci; else npm i; fi
            WORKDIR="${THEME_DIR}"
          else
            echo "No package.json found at root or ${THEME_DIR}" >&2
            exit 1
          fi
          echo "WORKDIR=${WORKDIR}" >> $GITHUB_ENV
          npx --yes sass@1.77.6 --version

      # Check if SASS files have changed
      - name: Check for SASS changes
        id: sass_changes
        run: |
          if [ "${{ github.event.before }}" == "0000000000000000000000000000000000000000" ]; then
            # First commit, build SASS
            echo "sass_changed=true" >> $GITHUB_OUTPUT
            echo "Reason: First commit or force push"
          elif git rev-parse "${{ github.event.before }}" >/dev/null 2>&1 && \
               git diff --name-only ${{ github.event.before }}..${{ github.sha }} | grep -E '\.(scss|sass)$'; then
            echo "sass_changed=true" >> $GITHUB_OUTPUT
            echo "Reason: SASS files changed"
          elif git diff --name-only HEAD^ HEAD 2>/dev/null | grep -E '\.(scss|sass)$'; then
            echo "sass_changed=true" >> $GITHUB_OUTPUT
            echo "Reason: SASS files changed (fallback diff)"
          else
            echo "sass_changed=false" >> $GITHUB_OUTPUT
            echo "Reason: No SASS files changed"
          fi

      # Sanity check: ensure your theme's vendor/rfs exists (no npm bootstrap)
      - name: Verify theme vendor/rfs
        if: steps.sass_changes.outputs.sass_changed == 'true'
        run: |
          test -f "${THEME_DIR}/sass/bootstrap5/vendor/_rfs.scss" || {
            echo "Missing ${THEME_DIR}/sass/bootstrap5/vendor/_rfs.scss" >&2
            echo "Fix the path or make the import relative: @import \"./vendor/rfs\";" >&2
            exit 65
          }

      # Build CSS using ONLY your theme sources. Add include paths to theme sass dirs.
      - name: Build CSS
        if: steps.sass_changes.outputs.sass_changed == 'true'
        working-directory: ${{ env.WORKDIR }}
        run: |
          # figure out source & out based on where we installed
          if [ -f "sass/main.scss" ]; then
            SRC="sass/main.scss"
            OUT="css-output/bundle.css"
            mkdir -p css-output
            INCLUDE1="sass"
            INCLUDE2="sass/bootstrap5"
          else
            SRC="${THEME_DIR}/sass/main.scss"
            OUT="${THEME_DIR}/css-output/bundle.css"
            mkdir -p "${THEME_DIR}/css-output"
            INCLUDE1="${THEME_DIR}/sass"
            INCLUDE2="${THEME_DIR}/sass/bootstrap5"
          fi

          npx sass \
            --load-path="${INCLUDE1}" \
            --load-path="${INCLUDE2}" \
            "${SRC}" "${OUT}" \
            --style=compressed --source-map

      - name: Select WP Engine env
        run: |
          BRANCH="${GITHUB_REF##*/}"
          if [ "$BRANCH" = "main" ]; then
            echo "WPE_ENV=${{ secrets.WPE_ENV_PRD }}" >> $GITHUB_ENV
          elif [ "$BRANCH" = "develop" ]; then
            echo "WPE_ENV=${{ secrets.WPE_ENV_DEV }}" >> $GITHUB_ENV
          elif [ "$BRANCH" = "staging" ]; then
            echo "WPE_ENV=${{ secrets.WPE_ENV_STG }}" >> $GITHUB_ENV
          else
            echo "Unsupported branch: $BRANCH"; exit 1
          fi

      - name: Deploy theme to WP Engine
        uses: wpengine/github-action-wpe-site-deploy@v3
        with:
          WPE_SSHG_KEY_PRIVATE: ${{ secrets.WPE_SSHG_KEY_PRIVATE }}
          WPE_ENV: ${{ env.WPE_ENV }}
          SRC_PATH: '${{ env.THEME_DIR }}/'
          REMOTE_PATH: '/${{ env.THEME_DIR }}/'
          CACHE_CLEAR: true
          # EXCLUDE: |
          #   node_modules
          #   **/*.map
